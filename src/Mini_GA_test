import pybel as pb

def find_poly_mw(polymer, poly_size, mw_list):
    temp_mw = 0
    #counter for cycling over sequence
    cycle = 0
    #loop over total monomers in each polymer
    for i in range(poly_size):
        print("cycle:", cycle)
        #cycle over sequence until total number of monomers is reached
        seq_cycle_location = i-cycle*(len(polymer[0]))
        seq_monomer_index = polymer[0][seq_cycle_location]
        print("sequence index:", i-cycle*(len(polymer[0])))
        if seq_cycle_location == (len(polymer[0])-1):
            cycle += 1
        #find index in polymer of monomer index (from smiles_list) from given sequence value
        monomer_index = polymer[seq_monomer_index+1]
        temp_mw += mw_list[monomer_index]
    return temp_mw

def main():
    #number of monomers per polymer
    poly_size = 5

    #Read in monomers from input file
    read_file = open('../input_files/1235MonomerList.txt','r')

    #create list of monomer SMILES strings
    #assumes input file has one monomer per line
    smiles_list = []
    for line in read_file:
        #grab first token from each line
        temp = line.split()[0]
        smiles_list.append(temp)

    read_file.close()

    #calculate MW for each monomer
    mw_list = []
    for monomer in smiles_list:
        temp_mono = pb.readstring("smi", monomer).molwt
        mw_list.append(temp_mono)

    max_mono_mw = max(mw_list)
    max_poly_mw = poly_size*max(mw_list)

    print(max(mw_list))


    test_polymer = [(0,0,0,0), mw_list.index(max_mono_mw), mw_list.index(max_mono_mw)]
    test_poly_mw = find_poly_mw(test_polymer, poly_size, mw_list)
    print("test_poly_mw", test_poly_mw)

    print("actual max poly mw", max_poly_mw)

    '''

    #create all possible numerical sequences for given number of monomer types
    sequence_list = find_sequences(num_type_mono)

    #create inital population as list of polymers
    population = []
    for polymer in range(pop_size):
        temp_poly=[]

        #select sequence type for polymer
        poly_seq = sequence_list[random.randint(0,len(sequence_list)-1)]
        temp_poly.append(poly_seq)

        #select monomer types for polymer
        for num in range(num_type_mono):
            poly_monomer = random.randint(0, len(smiles_list)-1)
            temp_poly.append(poly_monomer)

        #add polymer to population
        population.append(temp_poly)

    #Calculate polymer molecular weights
    poly_mw_list = find_poly_mw(population, poly_size, mw_list)

    #set initial values for min, max, and avg polymer weights
    min_mw_test = min(poly_mw_list)
    max_mw_test = max(poly_mw_list)
    avg_mw_test = (max_mw_test-min_mw_test)/2.0

    #create new output read_file
    write_file = open("ga_polymer_output.txt","w+")
    write_file.write("min_wt avg_wt max_wt\n")

    #Loop
    while (min_mw_test < min_mw_std):

        #Selection - select best 50% as parents

        #select heaviest (best) 50% of polymers as parents
        population = parent_select(poly_mw_list, population)

        #Mutation - one point mutation per parent
        for polymer in population:
            polymer = mutate(polymer, sequence_list, smiles_list)

        #Crossover - create children to repopulate bottom 50% of polymers in population
        population = crossover(population, pop_size)


        poly_mw_list = find_poly_mw(population, poly_size, mw_list)

        print(poly_mw_list)

        #find minimum polymer weight
        min_mw_test = min(poly_mw_list)
        max_mw_test = max(poly_mw_list)
        avg_mw_test = mean(poly_mw_list)

        write_file.write("{} {} {}\n".format(min_mw_test, avg_mw_test, max_mw_test))

        print(min_mw_test)


    write_file.close()


    #Print out SMILES strings meeting MW criteria
    polymer_smiles_list = []
    for polymer in population:
        polymer_smiles_list.append(construct_polymer_string(polymer, smiles_list, poly_size))
    print(polymer_smiles_list)
    '''

if __name__ == '__main__':
    main()
